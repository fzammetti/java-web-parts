/*
 * Copyright 2005 Frank W. Zammetti
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package javawebparts.ajaxparts.taglib.config;


import java.util.HashMap;


/**
 * This class is the top-level class that holds all Ajax configuration
 * information generated by the parsing of the config file.  It contains
 * two collections, one contains the configuration information for all the
 * custom handlers defined and the other contains configuration information
 * on all the groups defined.
 *
 * @author <a href="mailto:fzammetti@omnytex.com">Frank W. Zammetti</a>
 */
public class AjaxConfig {


  /**
   * The collection of handlers defined in the config file.
   */
  private static HashMap handlers = new HashMap();


  /**
   * The collection of groups defined in the config file.
   */
  private static HashMap groups = new HashMap();


  /**
   * Flag: Is the configuration frozen?
   */
  private static boolean frozen;


  /**
   * This field is soley to get rid of a CheckStyle complaint.  Yes, I *AM*
   * that anal!
   */
  private int dummy;


  /**
   * Accessor for dummy field.  Pointless, but necessary.
   *
   * @return int Current value of dummy Field.
   */
  public int getDummy() {

    return dummy;

  } // End getDummy().


  /**
   * Mutator for dummy field.  Pointless, but necessary.
   *
   * @param inDummy New value of dummy field.
   */
  public void setDummy(final int inDummy) {

    dummy = inDummy;

  } // End setDummy().


  /**
   * Adds a AjaxHandlerConfig object to the collection of handlers defined in
   * the config file.
   *
   * @param handler An AjaxHandlerConfig instance being added to the collection.
   */
  public static void addHandler(AjaxHandlerConfig handler) {

    if (!frozen) {
      handler.freeze();
      handlers.put(handler.getName(), handler);
    }

  } // End addHandler().


  /**
   * Returns an AjaxHandlerConfig instance from the collection by name.
   *
   * @param  name The name of the handler to return.
   * @return      The AjaxHandlerConfig instance requested by name from the
   *              collection.
   */
  public static AjaxHandlerConfig getHandler(String name) {

    return (AjaxHandlerConfig)handlers.get(name);

  } // End getHandler().


  /**
   * Adds an AjaxGroup instance to the collection under its ajaxRef.
   *
   * @param group The AjaxGroup instance to add
   */
  public static void addGroup(AjaxGroup group) {

    if (!frozen) {
      group.freeze();
      groups.put(group.getAjaxRef(), group);
    }

  } // End addGroup()


  /**
   * Returns an AjaxGroup instance from the collection by ajaxRef.
   *
   * @param  ajaxRef The AjaxGroup to return.
   * @return         The AjaxGroup instance requested by ajaxRef from the
   *                 collection.
   */
  public static AjaxGroup getGroup(String ajaxRef) {

    return (AjaxGroup)groups.get(ajaxRef);

  } // End getGroup()


  /**
   * Returns a collection of all handlers defined in the config file.
   *
   * @return The collection of handlers.
   */
  public static HashMap getHandlers() {

    return handlers;

  } // End getHandlers()


  /**
   * Returns a collection of all groups defined in the config file.
   *
   * @return The collection of groups.
   */
  public static HashMap getGroups() {

    return groups;

  } // End getGroups()


  /**
   * Freezes the configuration of this object.
   */
  public static void freeze() {

    frozen = validate();

  } // End freeze()


  /**
   * Returns true if this onject's config is frozen, false otherwise.
   *
   * @return True if frozen, false if not.
   */
  public static boolean isFrozen() {

    return frozen;

  } // End isFrozen()


  /**
   * This method is called when the object is frozen to ensure it is configured
   * in a legal way.  Note that at present, the is no validation done here, so
   * it simply returns true.  This is left here in case anything comes up at
   * a later time.
   *
   * @return True if validation passes, false if not.
   */
  private static boolean validate() {

    return true;

  } // End validate().


} // End class